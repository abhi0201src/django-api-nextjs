name: Application Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'menu/**'
      - 'menu-frontend/**'
      - 'requirements.txt'
      - 'Dockerfile'
      - 'manage.py'
      - '.github/workflows/application.yml'
  pull_request:
    branches: [main]
    paths:
      - 'menu/**'
      - 'menu-frontend/**'
      - 'requirements.txt'
      - 'Dockerfile'
      - 'manage.py'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - build-only
          - deploy
          - rollback
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      backend_ecr_url:
        description: 'Backend ECR Repository URL'
        required: false
        type: string
      frontend_ecr_url:
        description: 'Frontend ECR Repository URL'  
        required: false
        type: string
      cluster_name:
        description: 'ECS Cluster Name'
        required: false
        type: string

env:
  AWS_REGION: us-west-2
  TF_VERSION: "1.6"

jobs:
  setup:
    name: Setup Pipeline
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      action: ${{ steps.env.outputs.action }}
      backend_ecr_url: ${{ steps.ecr.outputs.backend_ecr_url }}
      frontend_ecr_url: ${{ steps.ecr.outputs.frontend_ecr_url }}
      cluster_name: ${{ steps.ecr.outputs.cluster_name }}
      image_tag: ${{ steps.env.outputs.image_tag }}
    steps:
      - name: Determine Environment and Action
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "action=${{ github.event.inputs.action }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "action=deploy" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "action=deploy" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "action=build-only" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "action=deploy" >> $GITHUB_OUTPUT
          fi
          
          # Create image tag
          echo "image_tag=${GITHUB_SHA:0:8}-$(date +%s)" >> $GITHUB_OUTPUT

      - name: Get Infrastructure Outputs
        id: ecr
        run: |
          if [ -n "${{ github.event.inputs.backend_ecr_url }}" ]; then
            echo "backend_ecr_url=${{ github.event.inputs.backend_ecr_url }}" >> $GITHUB_OUTPUT
            echo "frontend_ecr_url=${{ github.event.inputs.frontend_ecr_url }}" >> $GITHUB_OUTPUT
            echo "cluster_name=${{ github.event.inputs.cluster_name }}" >> $GITHUB_OUTPUT
          else
            # Default ECR URLs based on environment
            ENV="${{ steps.env.outputs.environment }}"
            AWS_ACCOUNT_ID="629385237449"  # Your AWS account ID
            echo "backend_ecr_url=${AWS_ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/django-nextjs-app-${ENV}-backend" >> $GITHUB_OUTPUT
            echo "frontend_ecr_url=${AWS_ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/django-nextjs-app-${ENV}-frontend" >> $GITHUB_OUTPUT
            echo "cluster_name=django-nextjs-app-${ENV}-cluster" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Node.js for Frontend
        uses: actions/setup-node@v4
        with:
          node-version: '19'
          cache: 'npm'
          cache-dependency-path: menu-frontend/package-lock.json

      - name: Install Frontend Dependencies
        run: npm ci
        working-directory: ./menu-frontend

      - name: Build Frontend
        run: npm run build
        working-directory: ./menu-frontend

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v6
        with:
          context: .
          dockerfile: Dockerfile
          push: true
          tags: |
            ${{ needs.setup.outputs.backend_ecr_url }}:latest
            ${{ needs.setup.outputs.backend_ecr_url }}:${{ needs.setup.outputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push Frontend Image  
        uses: docker/build-push-action@v6
        with:
          context: ./menu-frontend
          dockerfile: Dockerfile.frontend
          push: true
          tags: |
            ${{ needs.setup.outputs.frontend_ecr_url }}:latest
            ${{ needs.setup.outputs.frontend_ecr_url }}:${{ needs.setup.outputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Environment: ${{ needs.setup.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "### Image Tag: \`${{ needs.setup.outputs.image_tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Application | Repository | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend | \`${{ needs.setup.outputs.backend_ecr_url }}\` | ✅ Built |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | \`${{ needs.setup.outputs.frontend_ecr_url }}\` | ✅ Built |" >> $GITHUB_STEP_SUMMARY

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.action == 'deploy'
    environment: 
      name: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Select Terraform Workspace
        run: terraform workspace select ${{ needs.setup.outputs.environment }}
        working-directory: ./terraform

      - name: Update ECS Task Definitions
        run: |
          cat > service_update.tfvars <<EOF
          backend_image = "${{ needs.setup.outputs.backend_ecr_url }}:${{ needs.setup.outputs.image_tag }}"
          frontend_image = "${{ needs.setup.outputs.frontend_ecr_url }}:${{ needs.setup.outputs.image_tag }}"
          EOF
        working-directory: ./terraform

      - name: Apply Service Updates
        run: |
          terraform apply -auto-approve \
            -var-file=terraform.tfvars \
            -var-file=service_update.tfvars \
            -target=module.ecs.aws_ecs_task_definition.backend \
            -target=module.ecs.aws_ecs_task_definition.frontend \
            -target=module.ecs.aws_ecs_service.backend \
            -target=module.ecs.aws_ecs_service.frontend
        working-directory: ./terraform

      - name: Wait for Service Stability
        run: |
          echo "Waiting for ECS services to stabilize..."
          
          # Wait for backend service
          aws ecs wait services-stable \
            --cluster ${{ needs.setup.outputs.cluster_name }} \
            --services django-nextjs-app-${{ needs.setup.outputs.environment }}-backend-service \
            --region ${{ env.AWS_REGION }}
          
          # Wait for frontend service  
          aws ecs wait services-stable \
            --cluster ${{ needs.setup.outputs.cluster_name }} \
            --services django-nextjs-app-${{ needs.setup.outputs.environment }}-frontend-service \
            --region ${{ env.AWS_REGION }}
          
          echo "✅ All services are stable"

      - name: Get Service Status
        id: status
        run: |
          # Get service details
          BACKEND_STATUS=$(aws ecs describe-services \
            --cluster ${{ needs.setup.outputs.cluster_name }} \
            --services django-nextjs-app-${{ needs.setup.outputs.environment }}-backend-service \
            --query 'services[0].deployments[?status==`PRIMARY`].{running:runningCount,desired:desiredCount}' \
            --output text --region ${{ env.AWS_REGION }})
          
          FRONTEND_STATUS=$(aws ecs describe-services \
            --cluster ${{ needs.setup.outputs.cluster_name }} \
            --services django-nextjs-app-${{ needs.setup.outputs.environment }}-frontend-service \
            --query 'services[0].deployments[?status==`PRIMARY`].{running:runningCount,desired:desiredCount}' \
            --output text --region ${{ env.AWS_REGION }})
          
          echo "backend_status=${BACKEND_STATUS}" >> $GITHUB_OUTPUT
          echo "frontend_status=${FRONTEND_STATUS}" >> $GITHUB_OUTPUT

      - name: Get Application URL
        id: url
        run: |
          ALB_DNS=$(terraform output -raw alb_dns_name 2>/dev/null || echo "Not available")
          echo "application_url=http://${ALB_DNS}" >> $GITHUB_OUTPUT
        working-directory: ./terraform

      - name: Deployment Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Environment: ${{ needs.setup.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "### Image Tag: \`${{ needs.setup.outputs.image_tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Status | Tasks |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend | ✅ Deployed | ${{ steps.status.outputs.backend_status }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | ✅ Deployed | ${{ steps.status.outputs.frontend_status }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Application URL" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.url.outputs.application_url }}" >> $GITHUB_STEP_SUMMARY

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [setup, build, deploy]
    if: needs.setup.outputs.action == 'deploy'
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Select Terraform Workspace
        run: terraform workspace select ${{ needs.setup.outputs.environment }}
        working-directory: ./terraform

      - name: Get ALB DNS
        id: alb
        run: |
          ALB_DNS=$(terraform output -raw alb_dns_name 2>/dev/null || echo "")
          echo "dns=${ALB_DNS}" >> $GITHUB_OUTPUT
        working-directory: ./terraform

      - name: Health Check
        if: steps.alb.outputs.dns != ''
        run: |
          echo "🏥 Starting health checks..."
          
          ALB_URL="http://${{ steps.alb.outputs.dns }}"
          MAX_ATTEMPTS=30
          ATTEMPT=1
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT/$MAX_ATTEMPTS: Checking $ALB_URL"
            
            if curl -f -s -o /dev/null --max-time 10 "$ALB_URL"; then
              echo "✅ Application is healthy!"
              echo "🌐 Application URL: $ALB_URL"
              break
            elif [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "❌ Health check failed after $MAX_ATTEMPTS attempts"
              exit 1
            else
              echo "⏳ Waiting 10 seconds before next attempt..."
              sleep 10
              ATTEMPT=$((ATTEMPT + 1))
            fi
          done

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.action == 'rollback'
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Rollback Services
        run: |
          echo "🔄 Rolling back ECS services..."
          
          # Rollback backend service
          aws ecs update-service \
            --cluster ${{ needs.setup.outputs.cluster_name }} \
            --service django-nextjs-app-${{ needs.setup.outputs.environment }}-backend-service \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}
          
          # Rollback frontend service
          aws ecs update-service \
            --cluster ${{ needs.setup.outputs.cluster_name }} \
            --service django-nextjs-app-${{ needs.setup.outputs.environment }}-frontend-service \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}
          
          echo "✅ Rollback initiated"

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [setup, build, deploy, health-check]
    if: always()
    steps:
      - name: Send Notification
        if: failure() && contains(secrets.ALERT_EMAIL, '@')
        run: |
          echo "Application pipeline failed for environment: ${{ needs.setup.outputs.environment }}"
          echo "Action: ${{ needs.setup.outputs.action }}"
          echo "Commit: ${{ github.sha }}"
          # Add email notification logic here if needed
