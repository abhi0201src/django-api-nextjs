name: Health Check & Monitoring

on:
  schedule:
    # Run every 30 minutes
    - cron: '*/30 * * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to check'
        required: true
        default: 'prod'
        type: choice
        options:
          - dev
          - staging
          - prod
      detailed_check:
        description: 'Run detailed health checks'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-west-2
  PROJECT_NAME: django-nextjs-app

jobs:
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [prod, staging]
    
    steps:
    - name: Set environment for manual run
      id: set-env
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          if [[ "${{ github.event.inputs.environment }}" == "${{ matrix.environment }}" ]]; then
            echo "run_check=true" >> $GITHUB_OUTPUT
          else
            echo "run_check=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "run_check=true" >> $GITHUB_OUTPUT
        fi

    - name: Configure AWS credentials
      if: steps.set-env.outputs.run_check == 'true'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Check ECS service health
      if: steps.set-env.outputs.run_check == 'true'
      id: ecs-health
      run: |
        ENVIRONMENT="${{ matrix.environment }}"
        CLUSTER_NAME="${{ env.PROJECT_NAME }}-${ENVIRONMENT}"
        
        echo "Checking ECS services for environment: ${ENVIRONMENT}"
        
        # Check backend service
        BACKEND_SERVICE="${{ env.PROJECT_NAME }}-${ENVIRONMENT}-backend"
        BACKEND_STATUS=$(aws ecs describe-services \
          --cluster ${CLUSTER_NAME} \
          --services ${BACKEND_SERVICE} \
          --query 'services[0].status' \
          --output text 2>/dev/null || echo "NOT_FOUND")
        
        # Check frontend service
        FRONTEND_SERVICE="${{ env.PROJECT_NAME }}-${ENVIRONMENT}-frontend"
        FRONTEND_STATUS=$(aws ecs describe-services \
          --cluster ${CLUSTER_NAME} \
          --services ${FRONTEND_SERVICE} \
          --query 'services[0].status' \
          --output text 2>/dev/null || echo "NOT_FOUND")
        
        echo "Backend service status: ${BACKEND_STATUS}"
        echo "Frontend service status: ${FRONTEND_STATUS}"
        
        if [[ "$BACKEND_STATUS" == "ACTIVE" && "$FRONTEND_STATUS" == "ACTIVE" ]]; then
          echo "ecs_healthy=true" >> $GITHUB_OUTPUT
        else
          echo "ecs_healthy=false" >> $GITHUB_OUTPUT
        fi
        
        echo "backend_status=${BACKEND_STATUS}" >> $GITHUB_OUTPUT
        echo "frontend_status=${FRONTEND_STATUS}" >> $GITHUB_OUTPUT

    - name: Get ALB endpoint
      if: steps.set-env.outputs.run_check == 'true' && steps.ecs-health.outputs.ecs_healthy == 'true'
      id: get-alb
      run: |
        ENVIRONMENT="${{ matrix.environment }}"
        
        # Get ALB DNS name from tags or terraform output
        ALB_DNS=$(aws elbv2 describe-load-balancers \
          --query "LoadBalancers[?contains(Tags[?Key=='Environment'].Value, '${ENVIRONMENT}') && contains(Tags[?Key=='Project'].Value, '${{ env.PROJECT_NAME }}')].DNSName" \
          --output text 2>/dev/null || echo "")
        
        if [[ -n "$ALB_DNS" && "$ALB_DNS" != "None" ]]; then
          echo "alb_dns=${ALB_DNS}" >> $GITHUB_OUTPUT
          echo "alb_found=true" >> $GITHUB_OUTPUT
        else
          echo "alb_found=false" >> $GITHUB_OUTPUT
          echo "❌ Could not find ALB for environment ${ENVIRONMENT}"
        fi

    - name: Test application endpoints
      if: steps.set-env.outputs.run_check == 'true' && steps.get-alb.outputs.alb_found == 'true'
      id: endpoint-check
      run: |
        ALB_DNS="${{ steps.get-alb.outputs.alb_dns }}"
        ENVIRONMENT="${{ matrix.environment }}"
        
        echo "Testing endpoints for ${ENVIRONMENT} environment..."
        
        # Test health endpoint
        HEALTH_STATUS=0
        curl -f -s --max-time 10 "http://${ALB_DNS}/health/" > /dev/null || HEALTH_STATUS=$?
        
        # Test frontend
        FRONTEND_STATUS=0
        curl -f -s --max-time 10 "http://${ALB_DNS}/" > /dev/null || FRONTEND_STATUS=$?
        
        # Test API endpoint
        API_STATUS=0
        curl -f -s --max-time 10 "http://${ALB_DNS}/api/" > /dev/null || API_STATUS=$?
        
        echo "Health endpoint status: ${HEALTH_STATUS}"
        echo "Frontend status: ${FRONTEND_STATUS}"
        echo "API status: ${API_STATUS}"
        
        if [[ $HEALTH_STATUS -eq 0 ]]; then
          echo "health_ok=true" >> $GITHUB_OUTPUT
        else
          echo "health_ok=false" >> $GITHUB_OUTPUT
        fi
        
        if [[ $FRONTEND_STATUS -eq 0 ]]; then
          echo "frontend_ok=true" >> $GITHUB_OUTPUT
        else
          echo "frontend_ok=false" >> $GITHUB_OUTPUT
        fi
        
        if [[ $API_STATUS -eq 0 ]]; then
          echo "api_ok=true" >> $GITHUB_OUTPUT
        else
          echo "api_ok=false" >> $GITHUB_OUTPUT
        fi

    - name: Check CloudWatch alarms
      if: steps.set-env.outputs.run_check == 'true' && github.event.inputs.detailed_check == 'true'
      id: cloudwatch-check
      run: |
        ENVIRONMENT="${{ matrix.environment }}"
        echo "Checking CloudWatch alarms for ${ENVIRONMENT}..."
        
        # Get alarms in ALARM state
        ALARMS_IN_ALARM=$(aws cloudwatch describe-alarms \
          --state-value ALARM \
          --query "MetricAlarms[?contains(AlarmName, '${ENVIRONMENT}')].AlarmName" \
          --output text)
        
        if [[ -n "$ALARMS_IN_ALARM" && "$ALARMS_IN_ALARM" != "None" ]]; then
          echo "alarms_triggered=true" >> $GITHUB_OUTPUT
          echo "triggered_alarms=${ALARMS_IN_ALARM}" >> $GITHUB_OUTPUT
          echo "⚠️ Alarms in ALARM state: ${ALARMS_IN_ALARM}"
        else
          echo "alarms_triggered=false" >> $GITHUB_OUTPUT
          echo "✅ No alarms in ALARM state"
        fi

    - name: Generate health report
      if: steps.set-env.outputs.run_check == 'true'
      run: |
        ENVIRONMENT="${{ matrix.environment }}"
        
        echo "## 📊 Health Check Report - ${ENVIRONMENT} Environment" >> health_report.md
        echo "**Check Time:** $(date -u)" >> health_report.md
        echo "" >> health_report.md
        
        # ECS Health
        echo "### 🐳 ECS Services" >> health_report.md
        if [[ "${{ steps.ecs-health.outputs.ecs_healthy }}" == "true" ]]; then
          echo "✅ **Backend Service:** ${{ steps.ecs-health.outputs.backend_status }}" >> health_report.md
          echo "✅ **Frontend Service:** ${{ steps.ecs-health.outputs.frontend_status }}" >> health_report.md
        else
          echo "❌ **Backend Service:** ${{ steps.ecs-health.outputs.backend_status }}" >> health_report.md
          echo "❌ **Frontend Service:** ${{ steps.ecs-health.outputs.frontend_status }}" >> health_report.md
        fi
        echo "" >> health_report.md
        
        # Endpoint Health
        if [[ "${{ steps.get-alb.outputs.alb_found }}" == "true" ]]; then
          echo "### 🌐 Application Endpoints" >> health_report.md
          if [[ "${{ steps.endpoint-check.outputs.health_ok }}" == "true" ]]; then
            echo "✅ **Health Endpoint:** Responding" >> health_report.md
          else
            echo "❌ **Health Endpoint:** Not responding" >> health_report.md
          fi
          
          if [[ "${{ steps.endpoint-check.outputs.frontend_ok }}" == "true" ]]; then
            echo "✅ **Frontend:** Accessible" >> health_report.md
          else
            echo "❌ **Frontend:** Not accessible" >> health_report.md
          fi
          
          if [[ "${{ steps.endpoint-check.outputs.api_ok }}" == "true" ]]; then
            echo "✅ **API:** Responding" >> health_report.md
          else
            echo "❌ **API:** Not responding" >> health_report.md
          fi
        else
          echo "### 🌐 Application Endpoints" >> health_report.md
          echo "❌ **Load Balancer:** Not found" >> health_report.md
        fi
        echo "" >> health_report.md
        
        # CloudWatch Alarms (if detailed check)
        if [[ "${{ github.event.inputs.detailed_check }}" == "true" ]]; then
          echo "### 📈 CloudWatch Alarms" >> health_report.md
          if [[ "${{ steps.cloudwatch-check.outputs.alarms_triggered }}" == "true" ]]; then
            echo "⚠️ **Triggered Alarms:** ${{ steps.cloudwatch-check.outputs.triggered_alarms }}" >> health_report.md
          else
            echo "✅ **All Alarms:** Normal state" >> health_report.md
          fi
          echo "" >> health_report.md
        fi
        
        # Overall Status
        OVERALL_HEALTHY=true
        if [[ "${{ steps.ecs-health.outputs.ecs_healthy }}" != "true" ]]; then
          OVERALL_HEALTHY=false
        fi
        if [[ "${{ steps.get-alb.outputs.alb_found }}" == "true" ]]; then
          if [[ "${{ steps.endpoint-check.outputs.health_ok }}" != "true" ]]; then
            OVERALL_HEALTHY=false
          fi
        else
          OVERALL_HEALTHY=false
        fi
        
        echo "### 🎯 Overall Status" >> health_report.md
        if [[ "$OVERALL_HEALTHY" == "true" ]]; then
          echo "✅ **${ENVIRONMENT} Environment:** Healthy" >> health_report.md
        else
          echo "❌ **${ENVIRONMENT} Environment:** Unhealthy" >> health_report.md
        fi
        
        # Add to step summary
        cat health_report.md >> $GITHUB_STEP_SUMMARY

    - name: Create alert on failure
      if: steps.set-env.outputs.run_check == 'true' && (steps.ecs-health.outputs.ecs_healthy != 'true' || steps.endpoint-check.outputs.health_ok != 'true')
      run: |
        ENVIRONMENT="${{ matrix.environment }}"
        echo "🚨 ALERT: ${ENVIRONMENT} environment health check failed!"
        echo "Please check the infrastructure and application status."
        
        # In a real scenario, you might want to:
        # - Send notifications to Slack/Teams
        # - Create incidents in PagerDuty
        # - Send emails to the team
        
        exit 1

  summary:
    name: Health Check Summary
    runs-on: ubuntu-latest
    needs: health-check
    if: always()
    
    steps:
    - name: Generate summary
      run: |
        echo "# 🏥 Health Check Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Check Time:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.health-check.result }}" == "success" ]]; then
          echo "✅ **Overall Status:** All environments healthy" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Overall Status:** Some environments need attention" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Next scheduled check:** $(date -d '+30 minutes' -u)" >> $GITHUB_STEP_SUMMARY
